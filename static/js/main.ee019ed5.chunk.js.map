{"version":3,"sources":["components/Todoitem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","Header","headerStyle","to","linkStyle","background","textAlign","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addItem","display","placeholder","flex","className","About","Fragment","App","Axios","delete","then","res","filter","post","data","console","log","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee019ed5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todoitem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      backgroundColor: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{\" \"}\r\n          {title}{\" \"}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            x{\" \"}\r\n          </button>{\" \"}\r\n        </p>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoitem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nconst btnStyle = {\r\n  backgroundColor: \"brown\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\",\r\n};\r\n\r\nexport default Todoitem;\r\n","import React from \"react\";\r\nimport Todoitem from \"./Todoitem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends React.Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => {\r\n      return (\r\n        <Todoitem\r\n          key={todo.id}\r\n          todo={todo}\r\n          markComplete={this.props.markComplete}\r\n          delTodo={this.props.delTodo}\r\n        />\r\n      );\r\n    });\r\n  }\r\n}\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1> TodoList </h1>{\" \"}\r\n      <Link to=\"/todolist\" style={linkStyle}>\r\n        Home\r\n      </Link>{\" \"}\r\n      |{\" \"}\r\n      <Link to=\"/about\" style={linkStyle}>\r\n        About\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst linkStyle = {\r\n  color: \"#fff\",\r\n  textDecoration: \"none\",\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onChange = (e) =>\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addItem(this.state.title);\r\n    this.setState({\r\n      title: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.onSubmit}\r\n        style={{\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo ...\"\r\n          style={{\r\n            flex: \"10\",\r\n            padding: \"5px\",\r\n          }}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{\r\n            flex: \"1\",\r\n          }}\r\n        />{\" \"}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1> About </h1>{\" \"}\r\n      <p> This is the Todo List V1 .0 .0 it 's part of a react crash course</p>{\" \"}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\nimport Axios from \"axios\";\n//import { v4 as uuid } from \"uuid\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n  };\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  delTodo = (id) => {\n    Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(\n      (res) => {\n        this.setState({\n          todos: this.state.todos.filter((todo) => {\n            return todo.id !== id;\n          }),\n        });\n      }\n    );\n  };\n\n  addItem = (title) => {\n    Axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n      title: title,\n      completed: false,\n    }).then((res) => {\n      this.setState({\n        todos: [...this.state.todos, res.data],\n      });\n    });\n  };\n\n  componentDidMount() {\n    console.log(\"Did Mount\");\n\n    Axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\").then(\n      (data) => {\n        console.log(data.data);\n\n        this.setState({ todos: [...data.data] });\n      }\n    );\n  }\n\n  render() {\n    console.log(\"render\");\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact\n              path=\"/todolist\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addItem={this.addItem} />{\" \"}\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />{\" \"}\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>{\" \"}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}